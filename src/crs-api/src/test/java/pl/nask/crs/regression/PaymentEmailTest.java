package pl.nask.crs.regression;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;

import pl.nask.crs.api.payment.CRSPaymentAppService;
import pl.nask.crs.api.vo.AuthenticatedUserVO;
import pl.nask.crs.api.vo.DomainWithPeriodVO;
import pl.nask.crs.api.vo.PaymentRequestVO;
import pl.nask.crs.commons.OpInfo;
import pl.nask.crs.commons.email.service.ParameterNameEnum;
import pl.nask.crs.domains.dsm.DomainStateMachine;
import pl.nask.crs.domains.services.DomainService;
import pl.nask.crs.payment.PaymentMethod;
import pl.nask.crs.security.authentication.WsAuthenticationService;

/**
 * Test for bugs #10799, 10776
 * https://drotest4.nask.net.pl:3000/issues/10799
 * https://drotest4.nask.net.pl:3000/issues/10776
 * 
 * TRANSACTION_DETAIL and TRANSACTION_VALUE are not populated into the email template.
 * This is because they are not visible to DSM which triggers sending mentioned emails.
 * 
 * This happens when the payment for domain in NRP is made - emails sent when the invoice is being settled are generated correctly.
 * 
 * Have to check, if email parameters generated by the Email actions used by DSM contain those parameters.
 * 
 * (C) Copyright 2013 NASK
 * Software Research & Development Department
 *
 * @author Artur Gniadzik
 *
 */
public class PaymentEmailTest extends AbstractEmailsTest {
	final int emailTemplateImCc = 67;
	final int emailTemplateImAdp = 65;
	final int emailTemplateImDc = 69;
	
	final int emailTemplateVmCc = 68;
	final int emailTemplateVmAdp = 66;
	final int emailTemplateVmDc = 70;
	
	final String domainName = "paydomain.ie";
	final String userName = "APITEST-IEDR";

	@Autowired
	WsAuthenticationService authService;
	
	@Autowired
	CRSPaymentAppService paymentService;
	DomainStateMachine dsm;
	@Autowired
	DomainService domainService;
	
	// mocked to speed up test
	// update: can't mock this (this way): pdf needs to be generated! (or an empty pdf file) - application logic demands it!
//	@Mocked
//	XmlToPdfExporter exporter;
	
	private AuthenticatedUserVO user;
	private Set<ParameterNameEnum> populatedParams = new HashSet<ParameterNameEnum>(Arrays.asList(
			ParameterNameEnum.TRANSACTION_DETAIL, ParameterNameEnum.TRANSACTION_VALUE, ParameterNameEnum.ORDER_ID					
			));
	
	@Test
	public void testParametersPresentForVmAdpPayments() throws Exception {
		testWithParams(4, PaymentMethod.ADP, null, emailTemplateVmAdp);
	}
	
	@Test
	public void testParametersPresentForVmCcPayments() throws Exception {
		testWithParams(4, PaymentMethod.CC, createBasicCCPaymentRequest(), emailTemplateVmCc);
	}
	
	@Test
	public void testParametersPresentForVmDebPayments() throws Exception {
		testWithParams(12, PaymentMethod.DEB, createBasicCCPaymentRequest(), emailTemplateVmDc);
	}
	
	@Test
	public void testParametersPresentForImAdpPayments() throws Exception {
		testWithParams(2, PaymentMethod.ADP, null, emailTemplateImAdp);
	}
	
	@Test
	public void testParametersPresentForImCcPayments() throws Exception {
		testWithParams(2, PaymentMethod.CC, createBasicCCPaymentRequest(), emailTemplateImCc);
	}
	
	@Test
	public void testParametersPresentForImDebPayments() throws Exception {
		testWithParams(10, PaymentMethod.DEB, createBasicCCPaymentRequest(), emailTemplateImDc);
	}

	@Test(enabled = false)
	private void testWithParams(int nrpState, PaymentMethod method, PaymentRequestVO request, int emailTemplate) throws Exception {
		domainService.forceDSMState(Arrays.asList(domainName), nrpState, new OpInfo("test", null, "test"));
		
		List<DomainWithPeriodVO> domains = Arrays.asList(new DomainWithPeriodVO(domainName, 1));
		
		createExpectations(emailTemplate, populatedParams);
		
		paymentService.pay(user, domains, method, request, false);
		
	}
	


	@BeforeMethod
	public void authenticate() throws Exception {
    	user = new AuthenticatedUserVO(authService.authenticate(userName, "Passw0rd!", false, "1.1.1.1", false, null, true, "ws"));
    }
	
	public static PaymentRequestVO createBasicCCPaymentRequest() {
        PaymentRequestVO paymentRequest = new PaymentRequestVO();
        paymentRequest.setCurrency("EUR");
        paymentRequest.setCardNumber("4263971921001307");
        paymentRequest.setCardType("VISA");
        paymentRequest.setCardHolderName("John Doe");
        paymentRequest.setCardExpDate("0115");
        return paymentRequest;
    }
}
