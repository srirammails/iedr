<?php 

// AUTO-GENERATED BY libxslt AT 2011-07-26T12:07:38+01:00

class CRSPaymentAppService_authenticatedUserVO
	extends crs_wsapi_vo_base
	{
	public $username;// type=xs:string, (NOT NULL), min=1
	public $authenticationToken;// type=xs:string, (NOT NULL), min=1
	}

class CRSPaymentAppService_depositVO
	extends crs_wsapi_vo_base
	{
	public $nicHandleId;// type=xs:string, (NOT NULL), min=0
	public $transactionDate;// type=xs:dateTime, (NOT NULL), min=0
	public $openBal;// type=xs:float, (NOT NULL), min=0
	public $closeBal;// type=xs:float, (NOT NULL), min=0
	}

class CRSPaymentAppService_domainWithPeriodVO
	extends crs_wsapi_vo_base
	{
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $period;// type=xs:int, (NOT NULL), min=0
	}

class CRSPaymentAppService_invoiceSearchCriteria
	extends crs_wsapi_vo_base
	{
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $futRenMonth;// type=xs:string, (NOT NULL), min=0
	}

class CRSPaymentAppService_invoiceTransactionsSummaryVO
	extends crs_wsapi_vo_base
	{
	public $paidDomains;// type=tns:receiptVO, (null), min=0, max=unbounded
	public $domainsToBePaidOffline;// type=tns:receiptVO, (null), min=0, max=unbounded
	}

class CRSPaymentAppService_invoiceType
	{
	const _TRAN = 'TRAN';
	const _TRAN_ADV = 'TRAN_ADV';
	const _FUT_REN = 'FUT_REN';
	const _CURR_REN_REG = 'CURR_REN_REG';
	const _MSD = 'MSD';
	}

class CRSPaymentAppService_invoiceVO
	extends crs_wsapi_vo_base
	{
	public $amount;// type=xs:float, (NOT NULL), min=0
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $holderId;// type=xs:string, (NOT NULL), min=0
	public $invoiceId;// type=xs:string, (NOT NULL), min=0
	public $msdDate;// type=xs:dateTime, (NOT NULL), min=0
	public $regDate;// type=xs:dateTime, (NOT NULL), min=0
	public $renDate;// type=xs:dateTime, (NOT NULL), min=0
	public $status;// type=xs:string, (NOT NULL), min=0
	public $trnDate;// type=xs:dateTime, (NOT NULL), min=0
	public $vat;// type=xs:float, (NOT NULL), min=0
	}

class CRSPaymentAppService_invoicesSummaryVO
	extends crs_wsapi_vo_base
	{
	public $count;// type=xs:int, (NOT NULL), min=1
	public $amountSum;// type=xs:decimal, (NOT NULL), min=0
	public $vatSum;// type=xs:decimal, (NOT NULL), min=0
	}

class CRSPaymentAppService_limitsPairVO
	extends crs_wsapi_vo_base
	{
	public $min;// type=xs:float, (NOT NULL), min=0
	public $max;// type=xs:float, (NOT NULL), min=0
	}

class CRSPaymentAppService_msdDomainSearchCriteria
	extends crs_wsapi_vo_base
	{
	public $billingStatus;// type=xs:string, (null), min=0, max=unbounded
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $holderId;// type=xs:string, (NOT NULL), min=0
	public $invoiceId;// type=xs:string, (NOT NULL), min=0
	public $msdDateFrom;// type=xs:dateTime, (NOT NULL), min=0
	public $msdDateTo;// type=xs:dateTime, (NOT NULL), min=0
	public $paymentStatus;// type=tns:paymentStatus, (NOT NULL), min=0
	public $registrationDateFrom;// type=xs:dateTime, (NOT NULL), min=0
	public $registrationDateTo;// type=xs:dateTime, (NOT NULL), min=0
	public $renewalDateFrom;// type=xs:dateTime, (NOT NULL), min=0
	public $renewalDateTo;// type=xs:dateTime, (NOT NULL), min=0
	}

class CRSPaymentAppService_msdDomainVO
	extends crs_wsapi_vo_base
	{
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $invoiceId;// type=xs:string, (NOT NULL), min=0
	public $paymentStatus;// type=tns:paymentStatus, (NOT NULL), min=0
	public $billingStatus;// type=xs:string, (NOT NULL), min=0
	public $holderId;// type=xs:string, (NOT NULL), min=0
	public $msdDate;// type=xs:dateTime, (NOT NULL), min=0
	public $regDate;// type=xs:dateTime, (NOT NULL), min=0
	public $renDate;// type=xs:dateTime, (NOT NULL), min=0
	}

class CRSPaymentAppService_paymentDataVO
	extends crs_wsapi_vo_base
	{
	public $amount;// type=xs:decimal, (NOT NULL), min=0
	public $vat;// type=xs:decimal, (NOT NULL), min=0
	public $total;// type=xs:decimal, (NOT NULL), min=0
	public $invoiceId;// type=xs:string, (null), min=0, max=unbounded
	public $orderId;// type=xs:string, (NOT NULL), min=0
	public $closingBalance;// type=xs:decimal, (NOT NULL), min=0
	}

class CRSPaymentAppService_paymentRequestVO
	extends crs_wsapi_vo_base
	{
	public $currency;// type=xs:string, (NOT NULL), min=0
	public $amount;// type=xs:int, (NOT NULL), min=0
	public $cardNumber;// type=xs:string, (NOT NULL), min=0
	public $cardExpDate;// type=xs:string, (NOT NULL), min=0
	public $cardType;// type=xs:string, (NOT NULL), min=0
	public $cardHolderName;// type=xs:string, (NOT NULL), min=0
	public $cvnNumber;// type=xs:int, (NOT NULL), min=0
	public $cvnPresenceIndicator;// type=xs:int, (NOT NULL), min=0
	}

class CRSPaymentAppService_paymentStatus
	{
	const _Y = 'Y';
	const _P = 'P';
	const _N = 'N';
	}

class CRSPaymentAppService_receiptVO
	extends crs_wsapi_vo_base
	{
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $transactionDate;// type=xs:dateTime, (NOT NULL), min=0
	public $invNumber;// type=xs:string, (NOT NULL), min=0
	public $orderId;// type=xs:string, (NOT NULL), min=0
	}

class CRSPaymentAppService_renewalDateType
	{
	const _LAST = 'LAST';
	const _CURRENT = 'CURRENT';
	const _FUTURE = 'FUTURE';
	}

class CRSPaymentAppService_shortInvoiceVO
	extends crs_wsapi_vo_base
	{
	public $invoiceNo;// type=xs:string, (NOT NULL), min=0
	public $vat;// type=xs:decimal, (NOT NULL), min=0
	public $amount;// type=xs:decimal, (NOT NULL), min=0
	public $count;// type=xs:int, (NOT NULL), min=1
	}

class CRSPaymentAppService_sortCriterion
	extends crs_wsapi_vo_base
	{
	public $sortBy;// type=xs:string, (NOT NULL), min=0
	public $ascending;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSPaymentAppService_service
	extends crs_wsapi_service_base
	{
	static public function depositFunds(&$result,&$errs, $user, $pRequest)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::depositFunds()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->depositFunds
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'pRequest' => $pRequest, // type=tns:paymentRequestVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(depositVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'PaymentException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getAllMsdDomains(&$result,&$errs, $user, $criteria, $offset, $limit, $sortCriteria)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getAllMsdDomains()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getAllMsdDomains
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'criteria' => $criteria, // type=tns:msdDomainSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'sortCriteria' => $sortCriteria, // type=tns:sortCriterion, (NOT NULL), min=0, max=unbounded
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(msdDomainVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getAllMsdDomainsCount(&$result,&$errs, $user, $criteria)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getAllMsdDomainsCount()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getAllMsdDomainsCount
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'criteria' => $criteria, // type=tns:msdDomainSearchCriteria, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getCurRegRenShortInvoice(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getCurRegRenShortInvoice()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getCurRegRenShortInvoice
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(shortInvoiceVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getDepositLimits(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getDepositLimits()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getDepositLimits
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(limitsPairVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getFee(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getFee()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getFee
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getInvoicesSummary(&$result,&$errs, $user, $invoiceType, $domainName, $month)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getInvoicesSummary()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getInvoicesSummary
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'invoiceType' => $invoiceType, // type=tns:invoiceType, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					'month' => $month, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(invoicesSummaryVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getInvoicesWithLimit(&$result,&$errs, $user, $invoiceType, $criteria, $offset, $limit, $sortCriteria)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getInvoicesWithLimit()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getInvoicesWithLimit
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'invoiceType' => $invoiceType, // type=tns:invoiceType, (NOT NULL), min=0
					'criteria' => $criteria, // type=tns:invoiceSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'sortCriteria' => $sortCriteria, // type=tns:sortCriterion, (NOT NULL), min=0, max=unbounded
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(invoiceVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getLastInvoiceDate(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getLastInvoiceDate()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getLastInvoiceDate
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getMsdInvoiceCount(&$result,&$errs, $user, $noPendingPayment, $renewalDateType)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getMsdInvoiceCount()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getMsdInvoiceCount
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'noPendingPayment' => $noPendingPayment, // type=xs:boolean, (NOT NULL), min=1
					'renewalDateType' => $renewalDateType, // type=tns:renewalDateType, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getMsdInvoicesWithLimit(&$result,&$errs, $user, $noPendingPayment, $offset, $limit, $renewalDateType)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getMsdInvoicesWithLimit()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getMsdInvoicesWithLimit
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'noPendingPayment' => $noPendingPayment, // type=xs:boolean, (NOT NULL), min=1
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'renewalDateType' => $renewalDateType, // type=tns:renewalDateType, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(invoiceVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getProductPrice(&$result,&$errs, $user, $period)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getProductPrice()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getProductPrice
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'period' => $period, // type=xs:int, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'ProductPriceNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getProductPromoPrice(&$result,&$errs, $user, $period, $renewDate)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getProductPromoPrice()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getProductPromoPrice
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'period' => $period, // type=xs:int, (NOT NULL), min=1
					'renewDate' => $renewDate, // type=xs:dateTime, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'ProductPriceNotFoundException',
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getRegistrarFee(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getRegistrarFee()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getRegistrarFee
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getTransactionsForInvoice(&$result,&$errs, $user, $invoiceId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getTransactionsForInvoice()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getTransactionsForInvoice
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'invoiceId' => $invoiceId, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(invoiceTransactionsSummaryVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getTransferShortInvoice(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getTransferShortInvoice()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getTransferShortInvoice
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(shortInvoiceVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getUnpaidInvoice(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getUnpaidInvoice()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getUnpaidInvoice
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(invoiceVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getVatValue(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::getVatValue()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->getVatValue
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function hasUnpaidInvoice(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::hasUnpaidInvoice()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->hasUnpaidInvoice
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function isReceiptExists(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::isReceiptExists()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->isReceiptExists
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function isVat(&$result,&$errs, $user, $nicHandleId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::isVat()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->isVat
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandleId' => $nicHandleId, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function payAutoCreatedDomain(&$errs, $user, $remoteAddr, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::payAutoCreatedDomain()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->payAutoCreatedDomain
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'remoteAddr' => $remoteAddr, // type=xs:string, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'NotAdmissiblePeriodException',
				'NotEnoughtDepositFundsException',
				'DomainNotFoundException',
				'NicHandleNotFoundException',
				'NicHandleNotActiveException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function payFromDeposit(&$result,&$errs, $user, $remoteAddr, $domains, $invoiceType, $isTest)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::payFromDeposit()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->payFromDeposit
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'remoteAddr' => $remoteAddr, // type=xs:string, (NOT NULL), min=0
					'domains' => $domains, // type=tns:domainWithPeriodVO, (NOT NULL), min=0, max=unbounded
					'invoiceType' => $invoiceType, // type=tns:invoiceType, (NOT NULL), min=0
					'isTest' => $isTest, // type=xs:boolean, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(paymentDataVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'NotAdmissiblePeriodException',
				'NotEnoughtDepositFundsException',
				'DomainNotFoundException',
				'EmptyRemarkException',
				'DuplicatedAdminContact',
				'NicHandleNotFoundException',
				'NicHandleNotActiveException',
				'DomainManagedByAnotherResellerException',
				'DomainIncorrectStateForPaymentException',
				'ReceiptAlreadyExistsException',
				'InvalidPeriodException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function payMsdReactivation(&$result,&$errs, $user, $pRequest, $remoteAddr, $domains, $isCardPayment, $isTest)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::payMsdReactivation()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->payMsdReactivation
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'pRequest' => $pRequest, // type=tns:paymentRequestVO, (NOT NULL), min=0
					'remoteAddr' => $remoteAddr, // type=xs:string, (NOT NULL), min=0
					'domains' => $domains, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'isCardPayment' => $isCardPayment, // type=xs:boolean, (NOT NULL), min=1
					'isTest' => $isTest, // type=xs:boolean, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(paymentDataVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'PaymentException',
				'NotEnoughtDepositFundsException',
				'MsdCategoriesException',
				'ProductPriceNotFoundException',
				'PaymentTypeException',
				'DomainNotFoundException',
				'EmptyRemarkException',
				'NicHandleNotFoundException',
				'NicHandleNotActiveException',
				'DomainEmailException',
				'DomainManagedByAnotherResellerException',
				'DomainIncorrectStateForPaymentException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function payOffline(&$result,&$errs, $user, $remoteAddr, $domains, $invoiceType, $isTest)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::payOffline()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->payOffline
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'remoteAddr' => $remoteAddr, // type=xs:string, (NOT NULL), min=0
					'domains' => $domains, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'invoiceType' => $invoiceType, // type=tns:invoiceType, (NOT NULL), min=0
					'isTest' => $isTest, // type=xs:boolean, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(paymentDataVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'NicHandleNotFoundException',
				'DomainManagedByAnotherResellerException',
				'DomainIncorrectStateForPaymentException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function payOnline(&$result,&$errs, $user, $pRequest, $remoteAddr, $domains, $invoiceType, $isTest)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::payOnline()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->payOnline
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'pRequest' => $pRequest, // type=tns:paymentRequestVO, (NOT NULL), min=0
					'remoteAddr' => $remoteAddr, // type=xs:string, (NOT NULL), min=0
					'domains' => $domains, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'invoiceType' => $invoiceType, // type=tns:invoiceType, (NOT NULL), min=0
					'isTest' => $isTest, // type=xs:boolean, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(paymentDataVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'PaymentException',
				'NotEnoughtDepositFundsException',
				'DomainNotFoundException',
				'EmptyRemarkException',
				'DuplicatedAdminContact',
				'NicHandleNotFoundException',
				'NicHandleNotActiveException',
				'DomainManagedByAnotherResellerException',
				'DomainIncorrectStateForPaymentException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function viewDeposit(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPaymentAppService::viewDeposit()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPaymentAppService?wsdl', self::$crs_soap_options);
			$response = $client->viewDeposit
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(depositVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DepositNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	}
?>
