<?php 

// AUTO-GENERATED BY libxslt AT 2011-07-26T12:07:38+01:00

class CRSDomainAppService_accountVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:long, (NOT NULL), min=1
	public $name;// type=xs:string, (NOT NULL), min=0
	public $status;// type=xs:string, (NOT NULL), min=0
	public $address;// type=xs:string, (NOT NULL), min=0
	public $county;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $webAddress;// type=xs:string, (NOT NULL), min=0
	public $invoiceFreq;// type=xs:string, (NOT NULL), min=0
	public $nextInvMonth;// type=xs:string, (NOT NULL), min=0
	public $phone;// type=xs:string, (NOT NULL), min=0
	public $fax;// type=xs:string, (NOT NULL), min=0
	public $tariff;// type=xs:string, (NOT NULL), min=0
	public $remark;// type=xs:string, (NOT NULL), min=0
	public $billingContact;// type=tns:contactVO, (NOT NULL), min=0
	public $creationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $statusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $agreementSigned;// type=xs:boolean, (NOT NULL), min=1
	public $ticketEdit;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSDomainAppService_authenticatedUserVO
	extends crs_wsapi_vo_base
	{
	public $username;// type=xs:string, (NOT NULL), min=1
	public $authenticationToken;// type=xs:string, (NOT NULL), min=1
	}

class CRSDomainAppService_billingStatusVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:int, (NOT NULL), min=1
	public $description;// type=xs:string, (NOT NULL), min=0
	public $detailedDescription;// type=xs:string, (NOT NULL), min=0
	}

class CRSDomainAppService_contactVO
	extends crs_wsapi_vo_base
	{
	public $companyName;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $email;// type=xs:string, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $nicHandle;// type=xs:string, (NOT NULL), min=0
	}

class CRSDomainAppService_deletedDomainVO
	extends crs_wsapi_vo_base
	{
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $domainHolder;// type=xs:string, (NOT NULL), min=0
	public $registrationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $renewalDate;// type=xs:dateTime, (NOT NULL), min=0
	public $deleteDate;// type=xs:dateTime, (NOT NULL), min=0
	}

class CRSDomainAppService_deletedDomainsDataVO
	extends crs_wsapi_vo_base
	{
	public $total;// type=xs:int, (NOT NULL), min=1
	public $deletedDomains;// type=tns:deletedDomainVO, (null), min=0, max=unbounded
	}

class CRSDomainAppService_domainCreateVO
	extends crs_wsapi_vo_base
	{
	public $name;// type=xs:string, (NOT NULL), min=0
	public $holder;// type=xs:string, (NOT NULL), min=0
	public $holderClass;// type=xs:string, (NOT NULL), min=0
	public $holderCategory;// type=xs:string, (NOT NULL), min=0
	public $resellerAccountId;// type=xs:long, (NOT NULL), min=1
	public $domainStatus;// type=tns:domainStatus, (NOT NULL), min=0
	public $domainStatusDate;// type=xs:dateTime, (NOT NULL), min=0
	public $billingStatus;// type=xs:string, (NOT NULL), min=0
	public $lockedStatus;// type=xs:boolean, (NOT NULL), min=1
	public $registrationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $renewDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $remark;// type=xs:string, (NOT NULL), min=0
	public $clikPaid;// type=xs:boolean, (NOT NULL), min=1
	public $creator;// type=tns:contactVO, (NOT NULL), min=0
	public $adminContacts;// type=tns:contactVO, (null), min=0, max=unbounded
	public $techContacts;// type=tns:contactVO, (null), min=0, max=unbounded
	public $billingContacts;// type=tns:contactVO, (null), min=0, max=unbounded
	public $nameservers;// type=tns:nameserverVO, (null), min=0, max=unbounded
	}

class CRSDomainAppService_domainPriceVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:string, (NOT NULL), min=0
	public $description;// type=xs:string, (NOT NULL), min=0
	public $price;// type=xs:long, (NOT NULL), min=1
	public $duration;// type=xs:int, (NOT NULL), min=1
	public $defaultPrice;// type=xs:boolean, (NOT NULL), min=1
	public $forRegistration;// type=xs:boolean, (NOT NULL), min=1
	public $forRenewal;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSDomainAppService_domainSearchCriteria
	extends crs_wsapi_vo_base
	{
	public $accountId;// type=xs:long, (NOT NULL), min=0
	public $billingStatus;// type=xs:string, (null), min=0, max=unbounded
	public $contactType;// type=xs:string, (null), min=0, max=unbounded
	public $domainHolder;// type=xs:string, (NOT NULL), min=0
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $domainStatus;// type=tns:domainStatus, (NOT NULL), min=0
	public $holderCategory;// type=xs:string, (NOT NULL), min=0
	public $holderClass;// type=xs:string, (NOT NULL), min=0
	public $lockedStatus;// type=xs:boolean, (NOT NULL), min=0
	public $lockedStatusString;// type=xs:string, (NOT NULL), min=0
	public $nicHandle;// type=xs:string, (NOT NULL), min=0
	public $registrationFrom;// type=xs:dateTime, (NOT NULL), min=0
	public $registrationTo;// type=xs:dateTime, (NOT NULL), min=0
	public $renewFrom;// type=xs:dateTime, (NOT NULL), min=0
	public $renewTo;// type=xs:dateTime, (NOT NULL), min=0
	}

class CRSDomainAppService_domainSearchResultVO
	extends crs_wsapi_vo_base
	{
	public $totalResults;// type=xs:long, (NOT NULL), min=1
	public $results;// type=tns:domainVO, (null), min=0, max=unbounded
	public $nameResults;// type=xs:string, (null), min=0, max=unbounded
	}

class CRSDomainAppService_domainStatus
	{
	const _Active = 'Active';
	const _Deleted = 'Deleted';
	const _Suspended = 'Suspended';
	const _PRA = 'PRA';
	}

class CRSDomainAppService_domainVO
	extends crs_wsapi_vo_base
	{
	public $name;// type=xs:string, (NOT NULL), min=0
	public $holder;// type=xs:string, (NOT NULL), min=0
	public $holderClass;// type=xs:string, (NOT NULL), min=0
	public $holderCategory;// type=xs:string, (NOT NULL), min=0
	public $resellerAccount;// type=tns:accountVO, (NOT NULL), min=0
	public $domainStatus;// type=tns:domainStatus, (NOT NULL), min=0
	public $domainStatusDate;// type=xs:dateTime, (NOT NULL), min=0
	public $billingStatus;// type=xs:string, (NOT NULL), min=0
	public $lockedStatus;// type=xs:boolean, (NOT NULL), min=1
	public $registrationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $renewDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $remark;// type=xs:string, (NOT NULL), min=0
	public $clikPaid;// type=xs:boolean, (NOT NULL), min=1
	public $dateRoll;// type=xs:int, (NOT NULL), min=0
	public $creator;// type=tns:contactVO, (NOT NULL), min=0
	public $adminContacts;// type=tns:contactVO, (NOT NULL), min=0, max=unbounded
	public $techContacts;// type=tns:contactVO, (null), min=0, max=unbounded
	public $billingContacts;// type=tns:contactVO, (null), min=0, max=unbounded
	public $nameservers;// type=tns:nameserverVO, (null), min=0, max=unbounded
	}

class CRSDomainAppService_extendedDomainInfoVO
	extends crs_wsapi_vo_base
	{
	public $domain;// type=tns:domainVO, (NOT NULL), min=0
	public $tickets;// type=xs:boolean, (NOT NULL), min=1
	public $documents;// type=xs:boolean, (NOT NULL), min=1
	public $relatedDomainNames;// type=xs:string, (null), min=0, max=unbounded
	public $pendingDomainNames;// type=xs:string, (null), min=0, max=unbounded
	}

class CRSDomainAppService_nameserverVO
	extends crs_wsapi_vo_base
	{
	public $name;// type=xs:string, (NOT NULL), min=0
	public $ipAddress;// type=xs:string, (NOT NULL), min=0
	}

class CRSDomainAppService_sortCriterion
	extends crs_wsapi_vo_base
	{
	public $sortBy;// type=xs:string, (NOT NULL), min=0
	public $ascending;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSDomainAppService_transferDirection
	{
	const _INBOUND = 'INBOUND';
	const _OUTBOUND = 'OUTBOUND';
	}

class CRSDomainAppService_transferedDomainSearchCriteria
	extends crs_wsapi_vo_base
	{
	public $nicHandle;// type=xs:string, (NOT NULL), min=0
	public $transferDate;// type=xs:string, (NOT NULL), min=0
	public $transferDirection;// type=tns:transferDirection, (NOT NULL), min=0
	}

class CRSDomainAppService_service
	extends crs_wsapi_service_base
	{
	static public function alterStatus(&$errs, $user, $domainName, $hostmasterRemark, $newStatus)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::alterStatus()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->alterStatus
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					'hostmasterRemark' => $hostmasterRemark, // type=xs:string, (NOT NULL), min=0
					'newStatus' => $newStatus, // type=tns:domainStatus, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'EmptyRemarkException',
				'DomainEmailException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function create(&$errs, $user, $domain)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::create()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->create
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domain' => $domain, // type=tns:domainCreateVO, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'NicHandleNotFoundException',
				'NicHandleNotActiveException',
				'HolderClassNotExistException',
				'HolderCategoryNotExistException',
				'ClassDontMatchCategoryException',
				'ClassCategoryPermissionException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function edit(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::edit()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->edit
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(extendedDomainInfoVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function findDomains(&$result,&$errs, $user, $criteria, $offset, $limit, $sortCriteria)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::findDomains()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->findDomains
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'criteria' => $criteria, // type=tns:domainSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'sortCriteria' => $sortCriteria, // type=tns:sortCriterion, (NOT NULL), min=0, max=unbounded
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(domainSearchResultVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function findFullDomains(&$result,&$errs, $user, $criteria, $offset, $limit, $sortCriteria)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::findFullDomains()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->findFullDomains
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'criteria' => $criteria, // type=tns:domainSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'sortCriteria' => $sortCriteria, // type=tns:sortCriterion, (NOT NULL), min=0, max=unbounded
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(domainSearchResultVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function findTransferedDomains(&$result,&$errs, $user, $criteria, $offset, $limit, $isCurrent)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::findTransferedDomains()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->findTransferedDomains
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'criteria' => $criteria, // type=tns:transferedDomainSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'isCurrent' => $isCurrent, // type=xs:boolean, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(domainSearchResultVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getBillingStatuses(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::getBillingStatuses()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->getBillingStatuses
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(billingStatusVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getDeletedDomains(&$result,&$errs, $user, $billingNicHandleId, $offset, $limit)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::getDeletedDomains()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->getDeletedDomains
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'billingNicHandleId' => $billingNicHandleId, // type=xs:string, (NOT NULL), min=0
					'offset' => $offset, // type=xs:int, (NOT NULL), min=1
					'limit' => $limit, // type=xs:int, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(deletedDomainsDataVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getDomainPricing(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::getDomainPricing()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->getDomainPricing
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(domainPriceVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function isMsd(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::isMsd()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->isMsd
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function moveToMsd(&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::moveToMsd()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->moveToMsd
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function save(&$errs, $user, $domainName, $holder, $domainClass, $domainCategory, $billingStatus, $adminContacts, $techContacts, $nameservers, $renewDate, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::save()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->save
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'holder' => $holder, // type=xs:string, (NOT NULL), min=0
					'domainClass' => $domainClass, // type=xs:string, (NOT NULL), min=0
					'domainCategory' => $domainCategory, // type=xs:string, (NOT NULL), min=0
					'billingStatus' => $billingStatus, // type=xs:string, (NOT NULL), min=0
					'adminContacts' => $adminContacts, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'techContacts' => $techContacts, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'nameservers' => $nameservers, // type=tns:nameserverVO, (NOT NULL), min=0, max=unbounded
					'renewDate' => $renewDate, // type=xs:dateTime, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'EmptyRemarkException',
				'AccountNotFoundException',
				'AccountNotActiveException',
				'NicHandleNotFoundException',
				'NicHandleNotActiveException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function transfer(&$errs, $user, $domainName, $newAccountId, $newBillingContact, $newAdminContacts, $newTechContacts, $newNameservers, $hostmastersRemark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::transfer()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->transfer
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					'newAccountId' => $newAccountId, // type=xs:long, (NOT NULL), min=1
					'newBillingContact' => $newBillingContact, // type=xs:string, (NOT NULL), min=0
					'newAdminContacts' => $newAdminContacts, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'newTechContacts' => $newTechContacts, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'newNameservers' => $newNameservers, // type=tns:nameserverVO, (NOT NULL), min=0, max=unbounded
					'hostmastersRemark' => $hostmastersRemark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'EmptyRemarkException',
				'NicHandleIsAccountBillingContactException',
				'AccountNotFoundException',
				'AccountNotActiveException',
				'NicHandleNotFoundException',
				'DomainEmailException',
				'DomainTransferException',
				'NicHandleEmailException',
				'NicHandleNotActiveException',
				'DuplicatedAdminContact',
				'InvalidCountryException',
				'InvalidCountyException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				'DirectDomainTransferException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function view(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::view()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->view
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(extendedDomainInfoVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function viewPlain(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSDomainAppService::viewPlain()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSDomainAppService?wsdl', self::$crs_soap_options);
			$response = $client->viewPlain
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(domainVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'DomainNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	}
?>
