<?php

/**
 * File for Base Class for auto-generated CRS-WS Service Stubs, and related functions
 * 
 * @category  NRC
 * @package   IEDR_New_Registrars_Console
 * @author    IEDR <asd@iedr.ie>
 * @copyright 2011 IEDR
 * @license   http://www.iedr.ie/ (C) IEDR 2011
 * @version   CVS: $Id:$
 * @link      https://statistics.iedr.ie/
 */


/**
 * Includes array of CRS-WS version-info strings;
 * generated by CRS-WS build script /var/www/trunk/src/scripts/crs-ws-scripts/run_build.sh
 */
require_once('crs_ws_version.php');

/**
 * recursively converts an array to an Object
 * 
 * @param  array $a Array to convert
 * @return object converted object
 */
function arrayToObject($a)
	{
	if(is_array($a))
		foreach($a as $k => $v)
			$a[$k] = arrayToObject($v);
	return (object) $a;
	}

/**
 * replace non-space whitespace with spaces
 * 
 * used when exporting text into CSV format
 * 
 * @param  string $ds string
 * @return string 
 */
function cleanString($ds)
	{
	$junk = array("\r", "\n", "\t");
	// mainly to remove errant tabs from strings, which otherwise foul up CSV export.
	// don't trim spaces, as this e.g. makes the sorted grid view look as if it's not sorting properly.
	return str_replace($junk, ' ', $ds);
	}

/**
 * returns YYYY-MM-DD part of XMLDate
 * 
 * @param  string $ds XML Date as a string
 * @return string yyyy-mm-dd string
 */
function parseXmlDate($ds)
	{
	$d = null;
	if($ds and is_string($ds)) $d = date('Y-m-d',strtotime($ds));
	return $d;
	}

/**
 * math div function
 * 
 * @param  number $x number
 * @param  number $y number
 * @return number x div y
 */
function math_div($x,$y)
	{
	return ($x-($x%$y))/$y;
	}

/**
 * recursively converts an object to an array
 * 
 * @param  object $o object
 * @return array array
 */
function objectToArray($o)
	{
	$arr = array();
	if(is_object($o))
		$o = (array) $o;
	if(is_array ($o))
		{
		$arr = array();
		foreach($o as $k => $v)
			$arr[$k] = objectToArray($v);
		}
	else
		$arr = $o;
	#Yii::log(print_r($arr,true), 'debug', 'objectToArray()');
	return $arr;
	}

/**
 * simple xml formatter function
 * 
 * used to log WS-API requests/responses
 * 
 * @param  string $x xml
 * @return string formatted xml
 */
function pretty_print_xml($x)
	{
	$xml = new DOMDocument(); 
	$xml->preserveWhiteSpace = false; 
	$xml->formatOutput = true; 
	if($x != null and $x != '')
		{
		$xml->loadXML(preg_replace('/ {2,}/',' ',preg_replace('/[\r\n\t]+/',' ',$x)));
		}
	return $xml->saveXML();
	}

/**
 * log a string by appending it to a dynamically-named file
 * 
 * @param  string $f filename, ignored
 * @param  string $m log message
 * @return void   
 */
function special_log($f,$m)
	{
	file_put_contents(Yii::app()->getRuntimePath().DIRECTORY_SEPARATOR.'wsapi_soap_'.date('Y-m-d').'.log', $m, FILE_APPEND);
	}

/**
 * Recursively adds and object or array to a given object's data member
 * 
 * When data in the form of nested arrays or objects must be added to
 * an model which has the same data model, but is flattened, then this function
 * is called to set all the model data mambers to the values in the nested source data.
 * As Yii data Models cannot contain nested arrays or objects, they must represent
 * tree structures in a flattened format; for example a Soap data structure like this
 * <ul>
 * 	<li> name
 * 	<li> address
 * 		<ul>
 * 			<li> street
 * 			<li> city
 * 		</ul>
 * </ul>
 * would be represented in the model like this:
 * <ul>
 * 	<li> public $stuff_name;
 * 	<li> public $stuff_address_street;
 * 	<li> public $stuff_address_city;
 * </ul>
 * So to set the model from the object, one would call this function like this:
 * <ul>
 * 	<li> addToObjectAsProperties($model, 'stuff', $SoapData);
 * </ul>
 *
 * @param  object $o object (e.g. a model) to add data to
 * @param  string $n object public data member name
 * @param  array  $a object or array to add (e.g. an object returned by a soap call)
 * @param  string $s separator used to construct target object data membernames
 * @return void  
 */
function addToObjectAsProperties($o,$n,$a,$s='_')
	{
	// NOTE this doesn't work for Yii objects which implement __set() !
	if(!is_object($o)) die("addToObjectAsProperties: first param (object to argument) must be an object");
	if(!is_string($n)) die("addToObjectAsProperties: second param (name of member) must be a string");
	if(!is_string($s)) die("addToObjectAsProperties: optional fourth param (separator) must be a string");

	if(is_object($a))
		addToObjectAsProperties($o,$n,objectToArray($a),$s);
	else
		if(is_array($a))
			foreach($a as $k => $v)
				addToObjectAsProperties($o, $n.$s.$k, $v, $s);
		else
			$o->$n = $a;
	}

/**
 * Base class for generated CRS Web Service Data classes
 * 
 * @category  NRC
 * @package   IEDR_New_Registrars_Console
 * @author    IEDR <asd@iedr.ie>
 * @copyright 2011 IEDR
 * @license   http://www.iedr.ie/ (C) IEDR 2011
 * @version   Release: @package_version@
 * @link      https://statistics.iedr.ie/
 * @see       References to other sections (if any)...
 */
class crs_wsapi_vo_base
	{
	// public function __toString() { return get_object_vars($this); }
	}

/**
 * Base class for generated CRS Web Service classes
 * 
 * Code is generated by a script which interrogates the Soap Server with http requests for the WSDL and XSD files,
 * and generates the PHP output.
 * 
 * @category  NRC
 * @package   IEDR_New_Registrars_Console
 * @author    IEDR <asd@iedr.ie>
 * @copyright 2011 IEDR
 * @license   http://www.iedr.ie/ (C) IEDR 2011
 * @version   Release: @package_version@
 * @link      https://statistics.iedr.ie/
 * @see       /var/www/trunk/src/wsapi/wsdl_from_svc/get_wsdl.sh
 */
class crs_wsapi_service_base
	{

    /**
     * Description for static
     * @var    array 
     * @access public
     * @static
     * @see http://www.php.net/manual/en/soapclient.soapclient.php
     */
	static $crs_soap_options = array('soap_version'=>SOAP_1_1,'exceptions'=>true,'trace'=>1,'cache_wsdl'=>WSDL_CACHE_MEMORY);

    /**
     * URL for Soap server, set from value found with Yii::app()->params['wsapi_soap_url'] (set in protected/config/main.php)
     * @var    unknown
     * @access public 
     * @static
     */
	static $WS_API_URL;

    /**
     * value used to quench logging during 'noisy' operations
     * @var    boolean
     * @access public 
     * @static
     */
	static public $log_quench = false;

    /**
     * log function with file and line-number info
     * 
     * Long description (if any) ...
     * 
     * @param  string $m log message
     * @param  string $f filename, typically set with "__FILE__" by caller
     * @param  string $l line-number, typically set with "__LINE__" by caller
     * @return void  
     * @access public
     * @static
     */
	static function log($m,$f='',$l='')
		{
		special_log('wsapi_soap_'.date('Y-m-d').'.log', date('Y-m-d H:i:s ').$m."\n");
		}

    /**
     * check a Soap response for presence of on of the supplied list of possible exceptions
     * 
     * @param  mixed  $exception     soap return value
     * @param  array  $expected_list array of possible exception names
     * @return mixed  a loggable string describing any found exception
     * @access public
     * @static
     */
	static function getMessageFromException($exception,$expected_list)
		{
		$msg = $exception->getMessage();
		if(stristr($msg,'exception')===false)
			{
			$arr = get_object_vars($exception);
			if(isset($arr['detail']))
				{
				$detail_arr = get_object_vars($arr['detail']);
				$detkeys = array_keys($detail_arr);
				$exceptname = $detkeys[0];
				$msg = 'SOAP Exception : '.$exceptname;
				}
			else
				{
				$msg = 'SOAP Exception : '.print_r($arr,true);
				}
			}
		else
			{
			$newmsg = null;
			foreach($expected_list as $e)
				if(stristr($msg,$e)!=false)
					$newmsg .= $e.',';
			if($newmsg!=null)
				$msg = $newmsg;
			}
		return $msg.' : '.$exception->faultstring;
		}

    /**
     * log a soap request in detail
     * 
     * Logs connection url, date/time, crs web service version, formatted XML request and response
     * 
     * @param  mixed  $client SoapClient object instance
     * @return void  
     * @access public
     * @static
     */
	static function logrequest($client)
		{
		if($client!=null and !crs_wsapi_service_base::$log_quench)
			{
			if(is_object($client)) {
				# self::log(print_r($client->__getTypes(),true),__FILE__,__LINE__);
				$m=self::getSoapUrl().' ('.self::crs_wsapi_version_string().")\n";
				$m.=$client->__getLastRequestHeaders()."\n";
				$m.=pretty_print_xml($client->__getLastRequest())."\n";
				$m.=$client->__getLastResponseHeaders()."\n";
				$m.=pretty_print_xml($client->__getLastResponse());
				self::log($m,__FILE__,__LINE__);
				}
			else
				self::log(print_r($client,true),__FILE__,__LINE__);
			}
		}

    /**
     * gets the crs-ws soap url
     * 
     * reads a static value, which if null is set be reading the configured value from protected/config/main.php
     * 
     * @return string crs-ws url
     * @access public 
     * @static
     */
	static function getSoapUrl()
		{
		if(self::$WS_API_URL==null)
			{
			// set in protected/config/main.php
			self::$WS_API_URL = Yii::app()->params['wsapi_soap_url'];
			}
		return self::$WS_API_URL;
		}

    /**
     * returns version string of crs-ws
     * 
     * @return string Return description (if any) ...
     * @access public
     * @static
     * @see crs_ws_version.php
     */
	static function crs_wsapi_version_string()
		{
		global $crs_ws_version_info;
		$vn = $crs_ws_version_info['Last Changed Rev'];
		$vd = $crs_ws_version_info['Last Changed Date'];
		return "CRS-WS Version $vn, $vd";
		}
	}

