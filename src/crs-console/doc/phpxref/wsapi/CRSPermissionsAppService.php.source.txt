<?php 

// AUTO-GENERATED BY libxslt AT 2011-07-26T12:07:38+01:00

class CRSPermissionsAppService_authenticatedUserVO
	extends crs_wsapi_vo_base
	{
	public $username;// type=xs:string, (NOT NULL), min=1
	public $authenticationToken;// type=xs:string, (NOT NULL), min=1
	}

class CRSPermissionsAppService_level
	{
	const _Guest = 'Guest';
	const _Registrar = 'Registrar';
	const _CustomerService = 'CustomerService';
	const _Finance = 'Finance';
	const _Hostmaster = 'Hostmaster';
	const _HostmasterLead = 'HostmasterLead';
	const _Batch = 'Batch';
	const _TechnicalLead = 'TechnicalLead';
	const _Technical = 'Technical';
	const _FinanceLead = 'FinanceLead';
	const _SuperRegistrar = 'SuperRegistrar';
	}

class CRSPermissionsAppService_userHistorySearchResultVO
	extends crs_wsapi_vo_base
	{
	public $total;// type=xs:long, (NOT NULL), min=1
	public $list;// type=tns:userHistoryVO, (null), min=0, max=unbounded
	}

class CRSPermissionsAppService_userHistoryVO
	extends crs_wsapi_vo_base
	{
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changedBy;// type=xs:string, (NOT NULL), min=0
	public $groups;// type=xs:string, (null), min=0, max=unbounded
	}

class CRSPermissionsAppService_service
	extends crs_wsapi_service_base
	{
	static public function changePermissionGroups(&$errs, $user, $nicHandleId, $removedGroups, $addedGroups)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPermissionsAppService::changePermissionGroups()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPermissionsAppService?wsdl', self::$crs_soap_options);
			$response = $client->changePermissionGroups
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandleId' => $nicHandleId, // type=xs:string, (NOT NULL), min=0
					'removedGroups' => $removedGroups, // type=xs:string, (NOT NULL), min=0, max=unbounded
					'addedGroups' => $addedGroups, // type=xs:string, (NOT NULL), min=0, max=unbounded
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getHistory(&$result,&$errs, $user, $nicHandleId, $offset, $limit)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPermissionsAppService::getHistory()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPermissionsAppService?wsdl', self::$crs_soap_options);
			$response = $client->getHistory
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandleId' => $nicHandleId, // type=xs:string, (NOT NULL), min=0
					'offset' => $offset, // type=xs:int, (NOT NULL), min=1
					'limit' => $limit, // type=xs:int, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(userHistorySearchResultVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function isUserInGroup(&$result,&$errs, $user, $level)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSPermissionsAppService::isUserInGroup()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSPermissionsAppService?wsdl', self::$crs_soap_options);
			$response = $client->isUserInGroup
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'level' => $level, // type=tns:level, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	}
?>
