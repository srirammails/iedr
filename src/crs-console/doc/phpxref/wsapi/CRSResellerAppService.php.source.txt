<?php 

// AUTO-GENERATED BY libxslt AT 2011-07-26T12:07:39+01:00

class CRSResellerAppService_accountEditVO
	extends crs_wsapi_vo_base
	{
	public $address;// type=xs:string, (NOT NULL), min=0
	public $agreementSigned;// type=xs:boolean, (NOT NULL), min=1
	public $billingContact;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $county;// type=xs:string, (NOT NULL), min=0
	public $fax;// type=xs:string, (NOT NULL), min=0
	public $invoiceFreq;// type=xs:string, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $nextInvMonth;// type=xs:string, (NOT NULL), min=0
	public $phone;// type=xs:string, (NOT NULL), min=0
	public $tariff;// type=xs:string, (NOT NULL), min=0
	public $ticketEdit;// type=xs:boolean, (NOT NULL), min=1
	public $webAddress;// type=xs:string, (NOT NULL), min=0
	}

class CRSResellerAppService_accountSearchCriteria
	extends crs_wsapi_vo_base
	{
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $id;// type=xs:long, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $nicHandle;// type=xs:string, (NOT NULL), min=0
	}

class CRSResellerAppService_accountVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:long, (NOT NULL), min=1
	public $name;// type=xs:string, (NOT NULL), min=0
	public $status;// type=xs:string, (NOT NULL), min=0
	public $address;// type=xs:string, (NOT NULL), min=0
	public $county;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $webAddress;// type=xs:string, (NOT NULL), min=0
	public $invoiceFreq;// type=xs:string, (NOT NULL), min=0
	public $nextInvMonth;// type=xs:string, (NOT NULL), min=0
	public $phone;// type=xs:string, (NOT NULL), min=0
	public $fax;// type=xs:string, (NOT NULL), min=0
	public $tariff;// type=xs:string, (NOT NULL), min=0
	public $remark;// type=xs:string, (NOT NULL), min=0
	public $billingContact;// type=tns:contactVO, (NOT NULL), min=0
	public $creationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $statusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $agreementSigned;// type=xs:boolean, (NOT NULL), min=1
	public $ticketEdit;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSResellerAppService_authenticatedUserVO
	extends crs_wsapi_vo_base
	{
	public $username;// type=xs:string, (NOT NULL), min=1
	public $authenticationToken;// type=xs:string, (NOT NULL), min=1
	}

class CRSResellerAppService_contactVO
	extends crs_wsapi_vo_base
	{
	public $companyName;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $email;// type=xs:string, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $nicHandle;// type=xs:string, (NOT NULL), min=0
	}

class CRSResellerAppService_historicalAccountVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:long, (NOT NULL), min=1
	public $name;// type=xs:string, (NOT NULL), min=0
	public $status;// type=xs:string, (NOT NULL), min=0
	public $address;// type=xs:string, (NOT NULL), min=0
	public $county;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $webAddress;// type=xs:string, (NOT NULL), min=0
	public $invoiceFreq;// type=xs:string, (NOT NULL), min=0
	public $nextInvMonth;// type=xs:string, (NOT NULL), min=0
	public $phone;// type=xs:string, (NOT NULL), min=0
	public $fax;// type=xs:string, (NOT NULL), min=0
	public $tariff;// type=xs:string, (NOT NULL), min=0
	public $remark;// type=xs:string, (NOT NULL), min=0
	public $billingContact;// type=tns:contactVO, (NOT NULL), min=0
	public $creationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $statusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $agreementSigned;// type=xs:boolean, (NOT NULL), min=1
	public $ticketEdit;// type=xs:boolean, (NOT NULL), min=1
	public $changedBy;// type=xs:string, (NOT NULL), min=0
	}

class CRSResellerAppService_resellerSearchResult
	extends crs_wsapi_vo_base
	{
	public $totalResults;// type=xs:long, (NOT NULL), min=1
	public $results;// type=tns:accountVO, (null), min=0, max=unbounded
	}

class CRSResellerAppService_sortCriterion
	extends crs_wsapi_vo_base
	{
	public $sortBy;// type=xs:string, (NOT NULL), min=0
	public $ascending;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSResellerAppService_statusVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:int, (NOT NULL), min=1
	public $description;// type=xs:string, (NOT NULL), min=0
	}

class CRSResellerAppService_service
	extends crs_wsapi_service_base
	{
	static public function alterStatus(&$errs, $user, $accountId, $newStatus, $hostmasterRemark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSResellerAppService::alterStatus()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSResellerAppService?wsdl', self::$crs_soap_options);
			$response = $client->alterStatus
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'accountId' => $accountId, // type=xs:long, (NOT NULL), min=1
					'newStatus' => $newStatus, // type=xs:string, (NOT NULL), min=0
					'hostmasterRemark' => $hostmasterRemark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'EmptyRemarkException',
				'AccountNotFoundException',
				'NicHandleAssignedToDomainException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function create(&$result,&$errs, $user, $newAccount, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSResellerAppService::create()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSResellerAppService?wsdl', self::$crs_soap_options);
			$response = $client->create
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'newAccount' => $newAccount, // type=tns:accountEditVO, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'ContactNotFoundException',
				'EmptyRemarkException',
				'NicHandleNotFoundException',
				'NicHandleNotActiveException',
				'AccountNotFoundException',
				'AccountNotActiveException',
				'NicHandleIsAccountBillingContactException',
				'NicHandleEmailException',
				'AccountEmailException',
				'InvalidCountryException',
				'InvalidCountyException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function find(&$result,&$errs, $user, $searchCriteria, $offset, $limit, $orderBy)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSResellerAppService::find()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSResellerAppService?wsdl', self::$crs_soap_options);
			$response = $client->find
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'searchCriteria' => $searchCriteria, // type=tns:accountSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'orderBy' => $orderBy, // type=tns:sortCriterion, (NOT NULL), min=0, max=unbounded
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(resellerSearchResult)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function get(&$result,&$errs, $user, $accountId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSResellerAppService::get()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSResellerAppService?wsdl', self::$crs_soap_options);
			$response = $client->get
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'accountId' => $accountId, // type=xs:long, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(accountVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'AccountNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getAccountTariffs(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSResellerAppService::getAccountTariffs()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSResellerAppService?wsdl', self::$crs_soap_options);
			$response = $client->getAccountTariffs
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(statusVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function history(&$result,&$errs, $user, $accountId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSResellerAppService::history()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSResellerAppService?wsdl', self::$crs_soap_options);
			$response = $client->history
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'accountId' => $accountId, // type=xs:long, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(historicalAccountVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'AccountNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function save(&$errs, $user, $accountId, $accountData, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSResellerAppService::save()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSResellerAppService?wsdl', self::$crs_soap_options);
			$response = $client->save
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'accountId' => $accountId, // type=xs:long, (NOT NULL), min=1
					'accountData' => $accountData, // type=tns:accountEditVO, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'AccountNotFoundException',
				'EmptyRemarkException',
				'ContactNotFoundException',
				'NicHandleNotFoundException',
				'NicHandleIsAccountBillingContactException',
				'NicHandleEmailException',
				'ContactCannotChangeException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	}
?>
