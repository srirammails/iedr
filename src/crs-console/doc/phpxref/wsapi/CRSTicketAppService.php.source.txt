<?php 

// AUTO-GENERATED BY libxslt AT 2011-07-26T12:07:39+01:00

class CRSTicketAppService_adminStatusEnum
	{
	const _UNKNOWN_VALUE = 'UNKNOWN_VALUE';
	const _NEW = 'NEW';
	const _PASSED = 'PASSED';
	const _HOLD_UPDATE = 'HOLD_UPDATE';
	const _HOLD_PAPERWORK = 'HOLD_PAPERWORK';
	const _STALLED = 'STALLED';
	const _RENEW = 'RENEW';
	const _FINANCE_HOLDUP = 'FINANCE_HOLDUP';
	const _CANCELLED = 'CANCELLED';
	const _HOLD_REGISTRAR_APPROVAL = 'HOLD_REGISTRAR_APPROVAL';
	const _DOCUMENTS_SUBMITTED = 'DOCUMENTS_SUBMITTED';
	}

class CRSTicketAppService_authenticatedUserVO
	extends crs_wsapi_vo_base
	{
	public $username;// type=xs:string, (NOT NULL), min=1
	public $authenticationToken;// type=xs:string, (NOT NULL), min=1
	}

class CRSTicketAppService_contactVO
	extends crs_wsapi_vo_base
	{
	public $companyName;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $email;// type=xs:string, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $nicHandle;// type=xs:string, (NOT NULL), min=0
	}

class CRSTicketAppService_domainOperationType
	{
	const _REG = 'REG';
	const _DEL = 'DEL';
	const _MOD = 'MOD';
	}

class CRSTicketAppService_enchantedEntityClassVO
	extends crs_wsapi_vo_base
	{
	public $entityClass;// type=tns:entityClassVO, (NOT NULL), min=0
	public $categories;// type=tns:entityCategoryVO, (null), min=0, max=unbounded
	}

class CRSTicketAppService_entityCategoryVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:long, (NOT NULL), min=1
	public $name;// type=xs:string, (NOT NULL), min=0
	}

class CRSTicketAppService_entityClassVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:long, (NOT NULL), min=1
	public $name;// type=xs:string, (NOT NULL), min=0
	}

class CRSTicketAppService_failureReasonsEditVO
	extends crs_wsapi_vo_base
	{
	public $domainNameField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $domainHolderField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $domainHolderClassField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $domainHolderCategoryField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $resellerAccountField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $adminContactsField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1, max=unbounded
	public $techContactsField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1, max=unbounded
	public $billingContactsField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1, max=unbounded
	public $nameservers;// type=tns:nameserverChangeVO, (NOT NULL), min=1, max=unbounded
	}

class CRSTicketAppService_failureReasonsVO
	extends crs_wsapi_vo_base
	{
	public $domainNameField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $domainHolderField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $domainHolderClassField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $domainHolderCategoryField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $resellerAccountField;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=1
	public $adminContactsField;// type=tns:simpleDomainContactChangeVO, (NOT NULL), min=1, max=unbounded
	public $techContactsField;// type=tns:simpleDomainContactChangeVO, (NOT NULL), min=1, max=unbounded
	public $billingContactsField;// type=tns:simpleDomainContactChangeVO, (NOT NULL), min=1, max=unbounded
	public $nameservers;// type=tns:nameserverChangeVO, (NOT NULL), min=1, max=unbounded
	}

class CRSTicketAppService_historicalTicketVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:long, (NOT NULL), min=1
	public $type;// type=xs:string, (NOT NULL), min=0
	public $operation;// type=tns:failureReasonsVO, (NOT NULL), min=0
	public $adminStatus;// type=tns:adminStatusEnum, (NOT NULL), min=0
	public $adminStatusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $techStatus;// type=xs:string, (NOT NULL), min=0
	public $techStatusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $requestersRemark;// type=xs:string, (NOT NULL), min=0
	public $hostmastersRemark;// type=xs:string, (NOT NULL), min=0
	public $creator;// type=xs:string, (NOT NULL), min=0
	public $creationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $checkedOutTo;// type=xs:string, (NOT NULL), min=0
	public $clikPaid;// type=xs:boolean, (NOT NULL), min=1
	public $hasDocuments;// type=xs:boolean, (NOT NULL), min=1
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $ticketHolder;// type=xs:string, (NOT NULL), min=0
	public $previousHolder;// type=xs:string, (NOT NULL), min=0
	public $domainRenevalDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changedBy;// type=xs:string, (NOT NULL), min=0
	public $histChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	}

class CRSTicketAppService_nameserverChangeVO
	extends crs_wsapi_vo_base
	{
	public $name;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=0
	public $ipAddress;// type=tns:simpleDomainFieldChangeVO, (NOT NULL), min=0
	}

class CRSTicketAppService_simpleDomainContactChangeVO
	extends crs_wsapi_vo_base
	{
	public $newValue;// type=tns:contactVO, (NOT NULL), min=1
	public $oldValue;// type=tns:contactVO, (NOT NULL), min=0
	public $failureReasonId;// type=xs:int, (NOT NULL), min=0
	public $failureReason;// type=xs:string, (NOT NULL), min=0
	}

class CRSTicketAppService_simpleDomainFieldChangeVO
	extends crs_wsapi_vo_base
	{
	public $newValue;// type=xs:string, (NOT NULL), min=1
	public $failureReasonId;// type=xs:int, (NOT NULL), min=0
	public $oldValue;// type=xs:string, (NOT NULL), min=0
	public $failureReason;// type=xs:string, (NOT NULL), min=0
	}

class CRSTicketAppService_sortCriterion
	extends crs_wsapi_vo_base
	{
	public $sortBy;// type=xs:string, (NOT NULL), min=0
	public $ascending;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSTicketAppService_statusVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:int, (NOT NULL), min=1
	public $description;// type=xs:string, (NOT NULL), min=0
	}

class CRSTicketAppService_ticketCreateVO
	extends crs_wsapi_vo_base
	{
	public $type;// type=tns:domainOperationType, (NOT NULL), min=1
	public $domainName;// type=xs:string, (NOT NULL), min=1
	public $domainHolder;// type=xs:string, (NOT NULL), min=1
	public $domainHolderClass;// type=xs:string, (NOT NULL), min=1
	public $domainHolderCategory;// type=xs:string, (NOT NULL), min=1
	public $resellerAccountId;// type=xs:long, (NOT NULL), min=1
	public $resellerAccountName;// type=xs:string, (NOT NULL), min=0
	public $adminContact1NicHandle;// type=xs:string, (NOT NULL), min=1
	public $adminContact2NicHandle;// type=xs:string, (NOT NULL), min=0
	public $techContactNicHandle;// type=xs:string, (NOT NULL), min=1
	public $billingContactNicHandle;// type=xs:string, (NOT NULL), min=1
	public $ns1;// type=xs:string, (NOT NULL), min=1
	public $ip1;// type=xs:string, (NOT NULL), min=0
	public $ns2;// type=xs:string, (NOT NULL), min=1
	public $ip2;// type=xs:string, (NOT NULL), min=0
	public $ns3;// type=xs:string, (NOT NULL), min=0
	public $ip3;// type=xs:string, (NOT NULL), min=0
	public $requestersRemark;// type=xs:string, (NOT NULL), min=1
	public $hostmastersRemark;// type=xs:string, (NOT NULL), min=0
	public $adminStatus;// type=xs:int, (NOT NULL), min=1
	public $adminStatusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $techStatus;// type=xs:int, (NOT NULL), min=1
	public $techStatusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $checkedOut;// type=xs:string, (NOT NULL), min=0
	public $creatorNicHandle;// type=xs:string, (NOT NULL), min=0
	public $creationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $renewalDate;// type=xs:dateTime, (NOT NULL), min=0
	public $clikPaid;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSTicketAppService_ticketSearchCriteria
	extends crs_wsapi_vo_base
	{
	public $accountId;// type=xs:long, (NOT NULL), min=0
	public $adminStatus;// type=xs:int, (NOT NULL), min=0
	public $billNicHandle;// type=xs:string, (NOT NULL), min=0
	public $category;// type=xs:string, (NOT NULL), min=0
	public $changeDateFrom;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDateTo;// type=xs:dateTime, (NOT NULL), min=0
	public $clazz;// type=xs:string, (NOT NULL), min=0
	public $domainHolder;// type=xs:string, (NOT NULL), min=0
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $from;// type=xs:dateTime, (NOT NULL), min=0
	public $nicHandle;// type=xs:string, (NOT NULL), min=0
	public $techStatus;// type=xs:int, (NOT NULL), min=0
	public $ticketType;// type=tns:domainOperationType, (NOT NULL), min=0
	public $to;// type=xs:dateTime, (NOT NULL), min=0
	}

class CRSTicketAppService_ticketSearchResultVO
	extends crs_wsapi_vo_base
	{
	public $list;// type=tns:ticketVO, (null), min=0, max=unbounded
	public $totalResults;// type=xs:long, (NOT NULL), min=1
	}

class CRSTicketAppService_ticketVO
	extends crs_wsapi_vo_base
	{
	public $id;// type=xs:long, (NOT NULL), min=1
	public $type;// type=xs:string, (NOT NULL), min=0
	public $operation;// type=tns:failureReasonsVO, (NOT NULL), min=0
	public $adminStatus;// type=tns:adminStatusEnum, (NOT NULL), min=0
	public $adminStatusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $techStatus;// type=xs:string, (NOT NULL), min=0
	public $techStatusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $requestersRemark;// type=xs:string, (NOT NULL), min=0
	public $hostmastersRemark;// type=xs:string, (NOT NULL), min=0
	public $creator;// type=xs:string, (NOT NULL), min=0
	public $creationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $checkedOutTo;// type=xs:string, (NOT NULL), min=0
	public $clikPaid;// type=xs:boolean, (NOT NULL), min=1
	public $hasDocuments;// type=xs:boolean, (NOT NULL), min=1
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $ticketHolder;// type=xs:string, (NOT NULL), min=0
	public $previousHolder;// type=xs:string, (NOT NULL), min=0
	public $domainRenevalDate;// type=xs:dateTime, (NOT NULL), min=0
	}

class CRSTicketAppService_service
	extends crs_wsapi_service_base
	{
	static public function accept(&$errs, $user, $ticketId, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::accept()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->accept
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'TicketEmailException',
				'TicketCheckedOutToOtherException',
				'TicketNotCheckedOutException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function alterStatus(&$errs, $user, $ticketId, $adminStatus)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::alterStatus()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->alterStatus
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					'adminStatus' => $adminStatus, // type=tns:adminStatusEnum, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'TicketCheckedOutToOtherException',
				'TicketNotCheckedOutException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function checkIn(&$errs, $user, $ticketId, $adminStatus)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::checkIn()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->checkIn
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					'adminStatus' => $adminStatus, // type=tns:adminStatusEnum, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'TicketNotCheckedOutException',
				'TicketCheckedOutToOtherException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function checkOut(&$errs, $user, $ticketId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::checkOut()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->checkOut
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'TicketAlreadyCheckedOutExceptionVO',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function create(&$result,&$errs, $user, $ticket, $period)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::create()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->create
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticket' => $ticket, // type=tns:ticketCreateVO, (NOT NULL), min=0
					'period' => $period, // type=xs:int, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'NotAdmissiblePeriodException',
				'HolderClassNotExistException',
				'HolderCategoryNotExistException',
				'ClassDontMatchCategoryException',
				'ClassCategoryPermissionException',
				'DomainNotFoundException',
				'NicHandleNotFoundException',
				'CreateTicketValidationException',
				'NicHandleRecreateException',
				'NicHandleEmailException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function delete(&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::delete()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->delete
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function edit(&$result,&$errs, $user, $ticketId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::edit()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->edit
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(ticketVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function find(&$result,&$errs, $user, $searchCriteria, $offset, $limit, $sortCriteria)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::find()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->find
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'searchCriteria' => $searchCriteria, // type=tns:ticketSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'sortCriteria' => $sortCriteria, // type=tns:sortCriterion, (NOT NULL), min=0, max=unbounded
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(ticketSearchResultVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getAdminStatuses(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::getAdminStatuses()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->getAdminStatuses
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(statusVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getCategoriesForClass(&$result,&$errs, $user, $classId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::getCategoriesForClass()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->getCategoriesForClass
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'classId' => $classId, // type=xs:long, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(entityCategoryVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getClasses(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::getClasses()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->getClasses
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(entityClassVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getClassesWithCategories(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::getClassesWithCategories()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->getClassesWithCategories
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(enchantedEntityClassVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getTechStatuses(&$result,&$errs, $user)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::getTechStatuses()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->getTechStatuses
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(statusVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function history(&$result,&$errs, $user, $ticketId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::history()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->history
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(historicalTicketVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function reassign(&$errs, $user, $ticketId, $hostmasterNicHandle)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::reassign()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->reassign
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					'hostmasterNicHandle' => $hostmasterNicHandle, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'TicketNotCheckedOutException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function reject(&$errs, $user, $ticketId, $adminStatus, $failureReasons, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::reject()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->reject
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					'adminStatus' => $adminStatus, // type=tns:adminStatusEnum, (NOT NULL), min=0
					'failureReasons' => $failureReasons, // type=tns:failureReasonsEditVO, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'InvalidStatusException',
				'EmptyRemarkException',
				'TicketEmailException',
				'TicketCheckedOutToOtherException',
				'TicketNotCheckedOutException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function revise(&$result,&$errs, $user, $ticketId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::revise()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->revise
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(ticketVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function save(&$errs, $user, $ticketId, $failureReasons, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::save()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->save
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					'failureReasons' => $failureReasons, // type=tns:failureReasonsEditVO, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'EmptyRemarkException',
				'TicketCheckedOutToOtherException',
				'TicketNotCheckedOutException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function update(&$errs, $user, $ticketId, $domainOperations, $remark, $clikPaid)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::update()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->update
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					'domainOperations' => $domainOperations, // type=tns:failureReasonsEditVO, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					'clikPaid' => $clikPaid, // type=xs:boolean, (NOT NULL), min=1
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'EmptyRemarkException',
				'TicketCheckedOutToOtherException',
				'TicketNotCheckedOutException',
				'ContactNotActiveException',
				'TicketEditFlagException',
				'ContactNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function view(&$result,&$errs, $user, $ticketId)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::view()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->view
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'ticketId' => $ticketId, // type=xs:long, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(ticketVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'TicketNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function viewTicketForDomain(&$result,&$errs, $user, $domainName)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSTicketAppService::viewTicketForDomain()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSTicketAppService?wsdl', self::$crs_soap_options);
			$response = $client->viewTicketForDomain
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'domainName' => $domainName, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(ticketVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	}
?>
