<?php 

// AUTO-GENERATED BY libxslt AT 2011-07-26T12:07:38+01:00

class CRSNicHandleAppService_authenticatedUserVO
	extends crs_wsapi_vo_base
	{
	public $username;// type=xs:string, (NOT NULL), min=1
	public $authenticationToken;// type=xs:string, (NOT NULL), min=1
	}

class CRSNicHandleAppService_historicalNicHandleSearchResultVO
	extends crs_wsapi_vo_base
	{
	public $totalResults;// type=xs:long, (NOT NULL), min=1
	public $results;// type=tns:historicalNicHandleVO, (null), min=0, max=unbounded
	}

class CRSNicHandleAppService_historicalNicHandleVO
	extends crs_wsapi_vo_base
	{
	public $nicHandleId;// type=xs:string, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $accountId;// type=xs:long, (NOT NULL), min=0
	public $companyName;// type=xs:string, (NOT NULL), min=0
	public $address;// type=xs:string, (NOT NULL), min=0
	public $phones;// type=xs:string, (null), min=0, max=unbounded
	public $faxes;// type=xs:string, (null), min=0, max=unbounded
	public $county;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $email;// type=xs:string, (NOT NULL), min=0
	public $status;// type=tns:nhStatus, (NOT NULL), min=0
	public $statusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $registrationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $billCInd;// type=xs:boolean, (NOT NULL), min=1
	public $nicHandleRemark;// type=xs:string, (NOT NULL), min=0
	public $creator;// type=xs:string, (NOT NULL), min=0
	public $vatNo;// type=xs:string, (NOT NULL), min=0
	public $histChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changedBy;// type=xs:string, (NOT NULL), min=0
	}

class CRSNicHandleAppService_nhStatus
	{
	const _Active = 'Active';
	const _Deleted = 'Deleted';
	const _Suspended = 'Suspended';
	const _Renew = 'Renew';
	const _New = 'New';
	}

class CRSNicHandleAppService_nicHandleEditVO
	extends crs_wsapi_vo_base
	{
	public $name;// type=xs:string, (NOT NULL), min=1
	public $companyName;// type=xs:string, (NOT NULL), min=0
	public $email;// type=xs:string, (NOT NULL), min=1
	public $address;// type=xs:string, (NOT NULL), min=1
	public $county;// type=xs:string, (NOT NULL), min=1
	public $country;// type=xs:string, (NOT NULL), min=1
	public $accountNumber;// type=xs:long, (NOT NULL), min=1
	public $phones;// type=xs:string, (NOT NULL), min=1, max=unbounded
	public $faxes;// type=xs:string, (NOT NULL), min=0, max=unbounded
	public $vatNo;// type=xs:string, (NOT NULL), min=0
	}

class CRSNicHandleAppService_nicHandleSearchCriteria
	extends crs_wsapi_vo_base
	{
	public $accountNumber;// type=xs:long, (NOT NULL), min=0
	public $companyName;// type=xs:string, (NOT NULL), min=0
	public $contact;// type=xs:string, (NOT NULL), min=0
	public $domainName;// type=xs:string, (NOT NULL), min=0
	public $email;// type=xs:string, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $nicHandleId;// type=xs:string, (NOT NULL), min=0
	}

class CRSNicHandleAppService_nicHandleSearchResultVO
	extends crs_wsapi_vo_base
	{
	public $totalResults;// type=xs:long, (NOT NULL), min=1
	public $results;// type=tns:nicHandleVO, (null), min=0, max=unbounded
	}

class CRSNicHandleAppService_nicHandleVO
	extends crs_wsapi_vo_base
	{
	public $nicHandleId;// type=xs:string, (NOT NULL), min=0
	public $name;// type=xs:string, (NOT NULL), min=0
	public $accountId;// type=xs:long, (NOT NULL), min=0
	public $companyName;// type=xs:string, (NOT NULL), min=0
	public $address;// type=xs:string, (NOT NULL), min=0
	public $phones;// type=xs:string, (null), min=0, max=unbounded
	public $faxes;// type=xs:string, (null), min=0, max=unbounded
	public $county;// type=xs:string, (NOT NULL), min=0
	public $country;// type=xs:string, (NOT NULL), min=0
	public $email;// type=xs:string, (NOT NULL), min=0
	public $status;// type=tns:nhStatus, (NOT NULL), min=0
	public $statusChangeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $registrationDate;// type=xs:dateTime, (NOT NULL), min=0
	public $changeDate;// type=xs:dateTime, (NOT NULL), min=0
	public $billCInd;// type=xs:boolean, (NOT NULL), min=1
	public $nicHandleRemark;// type=xs:string, (NOT NULL), min=0
	public $creator;// type=xs:string, (NOT NULL), min=0
	public $vatNo;// type=xs:string, (NOT NULL), min=0
	}

class CRSNicHandleAppService_resellerDefaultsVO
	extends crs_wsapi_vo_base
	{
	public $nicHandleId;// type=xs:string, (NOT NULL), min=0
	public $techContactId;// type=xs:string, (NOT NULL), min=0
	public $ns1Name;// type=xs:string, (NOT NULL), min=0
	public $ns2Name;// type=xs:string, (NOT NULL), min=0
	public $ns3Name;// type=xs:string, (NOT NULL), min=0
	}

class CRSNicHandleAppService_sortCriterion
	extends crs_wsapi_vo_base
	{
	public $sortBy;// type=xs:string, (NOT NULL), min=0
	public $ascending;// type=xs:boolean, (NOT NULL), min=1
	}

class CRSNicHandleAppService_service
	extends crs_wsapi_service_base
	{
	static public function alterStatus(&$errs, $user, $nicHandle, $status, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::alterStatus()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->alterStatus
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandle' => $nicHandle, // type=xs:string, (NOT NULL), min=0
					'status' => $status, // type=tns:nhStatus, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'EmptyRemarkException',
				'NicHandleNotFoundException',
				'NicHandleAssignedToDomainException',
				'NicHandleIsAccountBillingContactException',
				'NicHandleIsTicketContactException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function create(&$result,&$errs, $user, $newNicHandle, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::create()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->create
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'newNicHandle' => $newNicHandle, // type=tns:nicHandleEditVO, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*()*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'AccountNotFoundException',
				'AccountNotActiveException',
				'NicHandleNotFoundException',
				'EmptyRemarkException',
				'NicHandleEmailException',
				'PasswordAlreadyExistsException',
				'InvalidCountryException',
				'InvalidCountyException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function find(&$result,&$errs, $user, $criteria, $offset, $limit, $sortCriteria)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::find()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->find
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'criteria' => $criteria, // type=tns:nicHandleSearchCriteria, (NOT NULL), min=0
					'offset' => $offset, // type=xs:long, (NOT NULL), min=1
					'limit' => $limit, // type=xs:long, (NOT NULL), min=1
					'sortCriteria' => $sortCriteria, // type=tns:sortCriterion, (NOT NULL), min=0, max=unbounded
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(nicHandleSearchResultVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function generateNewPassword(&$errs, $user, $nicHandle)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::generateNewPassword()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->generateNewPassword
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandle' => $nicHandle, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'NicHandleNotFoundException',
				'AccessDeniedException',
				'EmptyRemarkException',
				'NicHandleEmailException',
				'PasswordAlreadyExistsException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function get(&$result,&$errs, $user, $nicHandle)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::get()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->get
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandle' => $nicHandle, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(nicHandleVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'NicHandleNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function getDefaults(&$result,&$errs, $user, $nicHandle)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::getDefaults()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->getDefaults
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandle' => $nicHandle, // type=xs:string, (NOT NULL), min=0
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(resellerDefaultsVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function history(&$result,&$errs, $user, $nicHandleId, $offset, $limit)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::history()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->history
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandleId' => $nicHandleId, // type=xs:string, (NOT NULL), min=0
					'offset' => $offset, // type=xs:int, (NOT NULL), min=1
					'limit' => $limit, // type=xs:int, (NOT NULL), min=1
					)
				);
			if(is_object($response) and property_exists($response,'return'))
				$result = /*(historicalNicHandleSearchResultVO)*/ $response->return;
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'NicHandleNotFoundException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function save(&$errs, $user, $nicHandleId, $nicHandleData, $remark)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::save()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->save
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandleId' => $nicHandleId, // type=xs:string, (NOT NULL), min=0
					'nicHandleData' => $nicHandleData, // type=tns:nicHandleEditVO, (NOT NULL), min=0
					'remark' => $remark, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'AccessDeniedException',
				'NicHandleNotFoundException',
				'EmptyRemarkException',
				'AccountNotFoundException',
				'AccountNotActiveException',
				'NicHandleIsAccountBillingContactException',
				'NicHandleEmailException',
				'InvalidCountryException',
				'InvalidCountyException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	static public function saveNewPassword(&$errs, $user, $nicHandle, $password, $repeatedPassword)
		{
		$response = null;
		$errs = 'SOAP Request Error';
		self::log("CRSNicHandleAppService::saveNewPassword()",__FILE__,__LINE__);
		$client = null;
		try
			{
			$client = new SoapClient(self::getSoapUrl().'CRSNicHandleAppService?wsdl', self::$crs_soap_options);
			$response = $client->saveNewPassword
					(
					array(
					'user' => $user, // type=tns:authenticatedUserVO, (NOT NULL), min=0
					'nicHandle' => $nicHandle, // type=xs:string, (NOT NULL), min=0
					'password' => $password, // type=xs:string, (NOT NULL), min=0
					'repeatedPassword' => $repeatedPassword, // type=xs:string, (NOT NULL), min=0
					)
				);
			$errs = null;
			}
		catch (Exception $e)
			{
			$expected_exceptions = array
				(
				'EmptyPasswordException',
				'PasswordsDontMatchException',
				'PasswordTooEasyException',
				'NicHandleNotFoundException',
				'AccessDeniedException',
				'NicHandleEmailException',
				'PasswordAlreadyExistsException',
				'UserNotAuthenticatedException',
				'InvalidTokenException',
				'SessionExpiredException',
				
				);
			$errs = self::getMessageFromException($e, $expected_exceptions);
			}
		self::logrequest($client);
		return $response==null ? false : true;
		}
		
	}
?>
