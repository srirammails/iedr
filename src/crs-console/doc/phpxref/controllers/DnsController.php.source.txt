<?php

/**
 * Short description for file
 * 
 * Long description (if any) ...
 * 
 * PHP version 5
 * 
 * New Registration Console (C) IEDR 2011
 * 
 * @category  NRC
 * @package   IEDR_New_Registrars_Console
 * @author    IEDR <asd@iedr.ie>
 * @copyright 2011 IEDR
 * @license   http://www.iedr.ie/ (C) IEDR 2011
 * @version   CVS: $Id:$
 * @link      https://statistics.iedr.ie/
 * @see       References to other sections (if any)...
 */

/**
 * Short description for class
 * 
 * Long description (if any) ...
 * 
 * @category  NRC
 * @package   IEDR_New_Registrars_Console
 * @author    IEDR <asd@iedr.ie>
 * @copyright 2011 IEDR
 * @license   http://www.iedr.ie/ (C) IEDR 2011
 * @version   Release: @package_version@
 * @link      https://statistics.iedr.ie/
 * @see       References to other sections (if any)...
 */
class DnsController
	extends GridController
	{

    /**
     * Description for public
     * @var    array 
     * @access public
     */
	public $breadcrumbs = array('DNS');

    /**
     * Short description for function
     * 
     * Long description (if any) ...
     * 
     * @return void  
     * @access public
     */
	public function __construct()
		{
		}

    /**
     * Short description for function
     * 
     * Long description (if any) ...
     * 
     * @return void  
     * @access public
     * @see    dnsupdate.php, DNS_BulkMod
     */
	public function actionDnsupdate() { 

		$errCount = 0;
		$dns_model = new DNS_BulkMod();

		#If nothing has been supplied, the just add an error and render the form.

		if(($_REQUEST['gridaction']['domainlist'] == "") and ($_REQUEST['DNS_BulkMod']['domainlist'] == "")){
			$dns_model->addError('domainlist', 'Domain names are required.');	
			$this->render('dns/dnsupdate',array('model'=>$dns_model)); 	
		}
		else{
			#Taking the set of domains from the grid.
			if(Yii::app()->request->isPostRequest and isset($_POST['gridaction']) and ($_REQUEST['gridaction']['domainlist'] != "to_be_filled_by_javascript")){

				#echo "Step 1";exit();
				$dns_model->attributes=$_POST['DNS_BulkMod'];

				#Get the set of domains from the submitted string.  Convert to an array, remove empty elements.
				$arr = array_filter(explode(",", trim($_REQUEST['gridaction']['domainlist'])));
				#Just store unique domains, and remove the leading DNS order identified - this id should be an int from 0-7.
				$arr = array_unique(preg_replace('/^[0-7]_/', '', $arr));
				$dns_model->domainlist = implode(",", $arr);

				#If we're only dealing with 1 domain, get the details and populate the model.
				if(substr_count($dns_model->domainlist, ",")==0){
					CRSDomainAppService_service::view($result,$this->backend_errors,Yii::app()->user->authenticatedUser,$dns_model->domainlist);
			
					$dns_model->ns = array("1");
					$dns_model->ip = array("1");

					$count = 1;
					foreach($result->domain->nameservers as $DNS){
						array_push($dns_model->ns, $DNS->name);
						array_push($dns_model->ip, $DNS->ipAddress);
					}
					unset($dns_model->ns[0]);
					unset($dns_model->ip[0]);
				}
			}

			#Taking in the set of domains from continually resubmitting the form.
			if(Yii::app()->request->isPostRequest and isset($_POST['DNS_BulkMod']))
				{
				#echo "Step 2";exit();
				$dns_model->attributes=$_POST['DNS_BulkMod'];
				$dns_model->domainlist = trim(Utility::replace_newline($dns_model->domainlist));	
				$dns_model->domainlist = trim($dns_model->domainlist,",");#remove trailing/leading commas.

				if($dns_model->validate()){

					Yii::log('model validates ok', 'debug', 'DnsController::actionDnsupdate()');
					$val_avail_domains = array();
					foreach(Utility::parseInput($dns_model->domainlist) as $domain)
						{
						// check if this domain is available
						if(!Utility::domainIsAvailable($domain)){
							$val_avail_domains[] = $domain;
						}
						else{
							$errCount++;
							$dns_model->addError('domainlist', $domain.' does not exist, or is not on your account.');	
						}
					}

					if((count($val_avail_domains)>0) && ($errCount == 0)){
						// go to next step : enter domain details
						Yii::log('go to next step : enter nameserver details: '.print_r($val_avail_domains,true), 'debug', 'DnsController::actionDnsupdate()');
						$vad = AuthOnlyBaseController::safeSerializeObj($dns_model);
						Yii::log('domain names serialized: '.$vad, 'debug', 'DnsController::actionDnsupdate()');
						$this->redirect(array('dns/makednsupdate','id'=>$vad,),true);
					}
				}
			}
		
			#If the user has submitted more than one domain, the the glue must be cleared.
			if(substr_count($dns_model->domainlist, ",")>0){
				$dns_model->ip = array();		
			}

			// display form (with any errs)
			$this->render('dns/dnsupdate',array('model'=>$dns_model)); 
		}
	}

    /**
     * Short description for function
     * 
     * Long description (if any) ...
     * 
     * @return string Return description (if any) ...
     * @access public
     */
	public function getExportFilenameTag()
		{
		return 'DomainReports_';
		}

	#The bit that actually does the dns check.


    /**
     * Short description for function
     * 
     * Long description (if any) ...
     * 
     * @return void  
     * @access public
     * @see    dnsupdate.php, DNS_BulkMod
     */
	public function actionMakednsupdate(){

		$errStatement = "please try again later or contact <a href=\"mailto:asd@iedr.ie\">asd@iedr.ie</a>";

		$vad = AuthOnlyBaseController::safeDeserializeObj($_REQUEST['id']);
		$vad->attributes=$_POST['DNS_BulkMod'];
		$vad->domainlist = Utility::replace_newline($vad->domainlist);	
		if(substr_count($vad->domainlist, ",")>0){
			$vad->ip = array();		
		}

		if($vad->validate()){#Only do this if the model validates?
			$thearray = explode(",", $vad['domainlist']);

			foreach($thearray as $domArr){
				foreach($vad['ns'] as $key=>$ns){
					if($ns){
						if($vad->ip[$key]){ $ns = $vad->ip[$key]; }#If glue has been provided, use it in place of the nameserver,
						exec(  Yii::app()->params['ckdnsPath'] . " " . escapeshellarg("$ns $domArr")  , $return_message_array, $return_number);

						if ($return_number != 0){
							$str .= "Problem executing ckdns, $errStatement";
							array_push($vad->message, $str);
							$this->render('dns/dnsupdate',array('model'=>$vad));
							exit();													
						}
						else{
							$VerifiedResult = end($return_message_array);
							$str = "Verification result for $domArr on $ns....";	
							Yii::log("\nVerification result for $domArr on $ns....");

							if (eregi('FATAL', $VerifiedResult)){
								$bad[] = $domArr; 
								$str.="Invalid";
								Yii::log("Invalid\n");
							}
							else{
								$good[] = $domArr; 
								$str .="Valid";
								Yii::log("valid\n");
							}
						}
						array_push($vad->message, $str);
					}
				}
			}

			#if any fail is detected, then the batch is not processed.  For testing, just allow changes regardless.  Need to set this to !$count for production.
			if(count($bad)){				
				if(!$this->saveDNS($vad)){
					array_push($vad->message, "API Failure - update not applied,  $errStatement");
				}
			}
			else{
				array_push($vad->message, "Errors found in the DNS validation - update not applied,  $errStatement");
			}
		}

		$this->render('dns/dnsupdate',array('model'=>$vad));							
	}


        #@param $theModel - the model containing the set of domains and nameserver and glue details we want to update.


    /**
     * Short description for function
     * 
     * Long description (if any) ...
     * 
     * @param  array     $theModel Parameter description (if any) ...
     * @return boolean   Return description (if any) ...
     * @access protected
     */
        protected function saveDNS($theModel){	
		$ns_arr = array();
		
		foreach($theModel['ns'] as $key=>$value){
			$ns = new CRSDomainAppService_nameserverVO();
			$ns->name = $value;  $ns->ipAddress = $theModel['ip'][$key];
			array_push($ns_arr, $ns); 
		}
		
		$doms = explode(",", $theModel['domainlist']);            
		$user = Yii::app()->user->authenticatedUser;
                $remark = 'DNS Update via CRS-WS-API';

		foreach($doms as $aDom){
			CRSDomainAppService_service::save($this->backend_errors, $user, $aDom, "", "", "", "", "", "", $ns_arr, "", $remark);		
		}

		Yii::log('errors="'.print_r($this->backend_errors,true).'"', 'debug', 'DnsController::saveDNS()');
                return ($this->backend_errors==null) ? true : false;
	}
}

?>
