package pl.nask.crs.payment;

import pl.nask.crs.commons.MoneyUtils;
import pl.nask.crs.commons.config.NameFormatter;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * (C) Copyright 2012 NASK
 * Software Research & Development Department
 */
public class Invoice {
    private final int id;
    private final String invoiceNumber;
    private final String accountName;
    private final long accountNumber;
    private final String address1;
    private final String address2;
    private final String address3;
    private final String billingNicHandle;
    private final String billingNicHandleName;
    private final String country;
    private final String county;
    private final String crsVersion;
    private final Date invoiceDate;
    private String MD5;
    private boolean completed;
    private final List<Transaction> transactions;
    private final Integer totalCost;
    private final Integer totalNetAmount;
    private final Integer totalVatAmount;
    //FIXME it is propably transaction specific(transaction can be settled separately)
    private final Date settlementDate;
    private final PaymentMethod paymentMethod;

    public static Invoice newInstance(int invoiceNumber, String accountName, long accountNumber, String address1, String address2, String address3, String billingNicHandle, String country, String county, String crsVersion, Date invoiceDate, String MD5, Integer totalCost, Integer totalNetAmount, Integer totalVatAmount) {
        return new Invoice(-1, format(invoiceNumber), accountName, accountNumber, address1, address2, address3, billingNicHandle, null, country, county, crsVersion, invoiceDate, MD5, false, null, totalCost, totalNetAmount, totalVatAmount, null, null);
    }

    private static String format(int invoiceNumber) {
    	return NameFormatter.getFormattedName(invoiceNumber, NameFormatter.NamePrefix.INV);
	}

	public Invoice(int id, String invoiceNumber, String accountName, long accountNumber, String address1, String address2, String address3, String billingNicHandle, String billingNicHandleName, String country, String county, String crsVersion, Date invoiceDate, String MD5, boolean completed, List<Transaction> transactions, Integer totalCost, Integer totalNetAmount, Integer totalVatAmount, Date settlementDate, PaymentMethod paymentMethod) {
        // generated by db
        this.id = id;
        this.invoiceNumber = invoiceNumber;
        this.accountName = accountName;
        this.accountNumber = accountNumber;
        this.address1 = address1;
        this.address2 = address2;
        this.address3 = address3;
        this.billingNicHandle = billingNicHandle;
        this.billingNicHandleName = billingNicHandleName;
        this.country = country;
        this.county = county;
        this.crsVersion = crsVersion;
        this.invoiceDate = invoiceDate;
        this.MD5 = MD5;
        this.completed = completed;
        this.transactions = transactions;
        this.totalCost = totalCost;
        this.totalNetAmount = totalNetAmount;
        this.totalVatAmount = totalVatAmount;
        this.settlementDate = settlementDate;
        this.paymentMethod = paymentMethod;
    }

    public int getId() {
        return id;
    }

    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    public String getAccountName() {
        return accountName;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public String getAddress1() {
        return address1;
    }

    public String getAddress2() {
        return address2;
    }

    public String getAddress3() {
        return address3;
    }

    public String getBillingNicHandle() {
        return billingNicHandle;
    }

    public String getBillingNicHandleName() {
        return billingNicHandleName;
    }

    public boolean isCompleted() {
        return completed;
    }

    public String getCountry() {
        return country;
    }

    public String getCounty() {
        return county;
    }

    public String getCrsVersion() {
        return crsVersion;
    }

    public Date getInvoiceDate() {
        return invoiceDate;
    }

    public String getMD5() {
        return MD5;
    }

    public void setCompleted(boolean completed) {
        this.completed = completed;
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }

    public Integer getTotalCost() {
        return totalCost;
    }

    public Integer getTotalNetAmount() {
        return totalNetAmount;
    }

    public Integer getTotalVatAmount() {
        return totalVatAmount;
    }

    public BigDecimal getCostInStandardUnit() {
        return MoneyUtils.getBigDecimalValueInStandardCurrencyUnit(totalCost);
    }

    public BigDecimal getVatAmountInStandardUnit() {
        return MoneyUtils.getBigDecimalValueInStandardCurrencyUnit(totalVatAmount);
    }

    public BigDecimal getNetAmountInStandardUnit() {
        return MoneyUtils.getBigDecimalValueInStandardCurrencyUnit(totalNetAmount);
    }

    public Date getSettlementDate() {
        return settlementDate;
    }

    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    @Override
    public String toString() {
        return String.format("Invoice[id=%s, invoiceNumber=%s, billingNH=%s, completed=%s]", id, invoiceNumber, billingNicHandle, completed);
    }

	public void updateMD5(String md5) {
		MD5 = md5;
	}

    public Map<BigDecimal, BigDecimal> getTotalVatMap() {
        Map<BigDecimal, BigDecimal> vatRateToTotalMap = new HashMap<BigDecimal, BigDecimal>();
        for (Transaction transaction : transactions) {
            BigDecimal vatRate = getVatRateInPercents(transaction);
            BigDecimal vatIdTotal = vatRateToTotalMap.get(vatRate);
            if (vatIdTotal == null) {
                vatIdTotal =  MoneyUtils.getBigDecimalValueInStandardCurrencyUnit(transaction.getTotalVatAmount());
                vatRateToTotalMap.put(vatRate, vatIdTotal);
            } else {
                vatIdTotal = vatIdTotal.add(MoneyUtils.getBigDecimalValueInStandardCurrencyUnit(transaction.getTotalVatAmount()));
                vatRateToTotalMap.put(vatRate, vatIdTotal);
            }
        }
        return vatRateToTotalMap;
    }

    private BigDecimal getVatRateInPercents(Transaction transaction) {
        BigDecimal vatRate = BigDecimal.valueOf(transaction.getReservations().get(0).getVatRate());
        BigDecimal inPercents = vatRate.multiply(BigDecimal.valueOf(100));
        return inPercents.setScale(2, RoundingMode.HALF_EVEN);
    }
}
